// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "database-go-with-repository-pattern/entity"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *CommentRepository) FindAll(ctx context.Context) ([]entity.Comment, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Comment, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Comment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *CommentRepository) FindByID(ctx context.Context, id int32) (*entity.Comment, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (*entity.Comment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) *entity.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, comment
func (_m *CommentRepository) Insert(ctx context.Context, comment entity.Comment) (entity.Comment, error) {
	ret := _m.Called(ctx, comment)

	var r0 entity.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Comment) (entity.Comment, error)); ok {
		return rf(ctx, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Comment) entity.Comment); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Get(0).(entity.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Comment) error); ok {
		r1 = rf(ctx, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
